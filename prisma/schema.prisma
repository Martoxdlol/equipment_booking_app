// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    ext_expires_in    Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // Business logic
    permissions     Permission[]
    namespaceUsers  NamespaceUser[] @relation("user")
    createdBookings Booking[]       @relation("createdby")
    updatedBookings Booking[]       @relation("updatedby")

    globalAdmin Boolean @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Business logic models

model NamespaceUser {
    id String @id @default(cuid())

    user     User?     @relation("user", fields: [userId], references: [id], onDelete: SetNull)
    userId   String?
    name     String
    email    String
    bookings Booking[] @relation("requestedby")

    // Standard to all models
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    namespace   NamespaceSettings @relation("settings", fields: [namespaceId], references: [id])
    namespaceId String

    @@unique([userId, namespaceId])
    @@unique([email, namespaceId])
    @@index([namespaceId])
}

model Booking {
    id String @id @default(cuid())

    // Each booking is requested by a user 
    user   NamespaceUser @relation("requestedby", fields: [userId], references: [id])
    userId String

    // Start time to end time
    from   TimeStamp @relation("from", fields: [fromId], references: [id])
    fromId String
    to     TimeStamp @relation("to", fields: [toId], references: [id])
    toId   String

    useType String @default("")
    comment String @default("")

    equipment   EquipmentBookingItem[]
    inUseAssets InUseAsset[]

    // Optionally, each booking can be part of a pool.
    // This means that if you change one request of the pool it changes all relatively
    pool   RecurrentBookingPool? @relation("pool", fields: [poolId], references: [id])
    poolId String?

    // A booking can be created by a different user than the requester 
    createdBy       User   @relation("createdby", fields: [createdByUserId], references: [id])
    createdByUserId String

    // A booking can be updated by a different user than the requester 
    updatedBy       User   @relation("updatedby", fields: [createdByUserId], references: [id])
    updatedByUserId String

    // Standard to all models
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    namespace   NamespaceSettings @relation("settings", fields: [namespaceId], references: [id])
    namespaceId String

    @@index([namespaceId])
}

model EquipmentBookingItem {
    id String @id @default(cuid())

    booking     Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    bookingId   String
    assetType   AssetType @relation(fields: [assetTypeId], references: [id])
    assetTypeId String
    quantity    Int

    // Standard to all models
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    namespace   NamespaceSettings @relation("settings", fields: [namespaceId], references: [id])
    namespaceId String

    @@index([namespaceId])
}

model RecurrentBookingPool {
    id String @id @default(cuid())

    bookings Booking[] @relation("pool")

    // Standard to all models
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    namespace   NamespaceSettings @relation("settings", fields: [namespaceId], references: [id])
    namespaceId String

    @@index([namespaceId])
}

/// Settings

// This app can support multiple namespaces, each one grouped by settings object
model NamespaceSettings {
    id      String  @id @default(cuid())
    slug    String  @unique
    name    String  @unique
    picture String?
    allowUsersByDefault Boolean @default(true)

    // It can be used to adjust the frontend
    timezone Int @default(-3)

    // Allow booking from one day to another
    multiDayBooking Boolean @default(false)

    // Users cannot choose whatever time range they want. It should be one of these
    eligibleTimes ElegibleTime[]

    // Standard to all models
    createdAt            DateTime               @default(now())
    updatedAt            DateTime               @updatedAt
    Booking              Booking[]              @relation("settings")
    pools                RecurrentBookingPool[] @relation("settings")
    dates                Date[]                 @relation("settings")
    timeStamps           TimeStamp[]            @relation("settings")
    assetTypes           AssetType[]            @relation("settings")
    assets               Asset[]                @relation("settings")
    equipmentBookingItem EquipmentBookingItem[] @relation("settings")
    permissions          Permission[]
    inUseAssets          InUseAsset[]           @relation("settings")
    users                NamespaceUser[]        @relation("settings")

    @@index([slug])
}

model Permission {
    id String @id @default(cuid())

    user   User   @relation(fields: [userId], references: [id])
    userId String

    namespace   NamespaceSettings @relation(fields: [namespaceId], references: [id])
    namespaceId String

    userLevel     Boolean @default(true)
    createAsOther Boolean @default(false)
    readAll       Boolean @default(false)
    admin         Boolean @default(false)

    @@unique([namespaceId, userId])
}

/// Dates and times

// Unique time, shared between bookings
model ElegibleTime {
    id String @id @default(cuid())

    hours   Int // Example: 7
    minutes Int // Example 30

    namespace   NamespaceSettings @relation(fields: [namespaceId], references: [id])
    namespaceId String

    timeStamps TimeStamp[]

    enabled Boolean @default(true)

    @@unique([namespaceId, hours, minutes])
    @@index([namespaceId, hours, minutes])
    @@index([namespaceId])
}

// Unique date, shared between bookings
model Date {
    id String @id @default(cuid())

    year  Int
    month Int
    day   Int

    timeStamps TimeStamp[]

    // Standard to all models
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    namespace   NamespaceSettings @relation("settings", fields: [namespaceId], references: [id])
    namespaceId String

    @@unique([namespaceId, year, month, day])
    @@index([namespaceId, year, month, day])
    @@index([namespaceId])
}

// Each booking hash a TimeStamp range
model TimeStamp {
    id String @id @default(cuid())

    date   Date   @relation(fields: [dateId], references: [id])
    dateId String

    time   ElegibleTime @relation(fields: [timeId], references: [id])
    timeId String

    // Relations
    bookingsFrom Booking[] @relation("from")
    bookingsTo   Booking[] @relation("to")

    // Standard to all models
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    namespace   NamespaceSettings @relation("settings", fields: [namespaceId], references: [id])
    namespaceId String

    @@unique([namespaceId, dateId, timeId])
    @@index([namespaceId, dateId, timeId])
    @@index([namespaceId])
}

/// Equipment

model AssetType {
    id   String @id @default(cuid())
    slug String // @unique, Similar to tag but only for internal use

    name     String // @unique, Friendly name
    metadata String? // Any data
    picture  String? // Picture URL

    assets  Asset[]
    enabled Boolean @default(true)

    // Standard to all models
    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @updatedAt
    namespace             NamespaceSettings      @relation("settings", fields: [namespaceId], references: [id])
    namespaceId           String
    equipmentBookingItems EquipmentBookingItem[]

    @@unique([namespaceId, slug])
    @@unique([namespaceId, name])
    @@index([namespaceId, slug])
    @@index([namespaceId])
}

// Examples: NOTEBOOK-B17, S1254, 
model Asset {
    id String @id @default(cuid())

    type        AssetType @relation(fields: [assetTypeId], references: [id])
    assetTypeId String
    tag         String // Required and unique identifier
    name        String? // Friendly name
    serial      String? // Serial number
    metadata    String? // Any data
    picture     String? // Picture URL
    enabled     Boolean   @default(true)

    // Standard to all models
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    namespace   NamespaceSettings @relation("settings", fields: [namespaceId], references: [id])
    namespaceId String
    inUseAsset  InUseAsset?

    @@unique([namespaceId, tag, assetTypeId])
    @@index([namespaceId])
}

model InUseAsset {
    id String @id @default(cuid())

    asset   Asset  @relation(fields: [assetId], references: [id])
    assetId String @unique

    booking   Booking @relation(fields: [bookingId], references: [id])
    bookingId String

    // Standard to all models
    createdAt   DateTime          @default(now())
    updatedAt   DateTime          @updatedAt
    namespace   NamespaceSettings @relation("settings", fields: [namespaceId], references: [id])
    namespaceId String

    @@index([namespaceId])
}
